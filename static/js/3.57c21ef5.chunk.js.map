{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Orders/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Orders/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Label","label","module","exports","CheckoutSummary","ContactData","react_default","style","width","margin","display","Burger","ingredients","Button","btnType","clicked","checkoutContinued","checkoutCancelled","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNum","country","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","orderInfo","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","isLoading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutContinuedHandler","history","replace","checkoutCancelledHandler","goBack","summary","react_router","to","purchasedRedirect","purchased","Auxiliary","Orders_CheckoutSummary_CheckoutSummary","exact","path","concat","match","component","order"],"mappings":"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","file":"static/js/3.57c21ef5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst Input = (props) => {\r\n  // make className more dymanic depending on whether form input is valid or not\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    // if invalid property turns out to be true push the invalid css custom class\r\n    // add should validate props to prevent dropdown from being red\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n      inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n  switch (props.elementType) {\r\n\r\n    case (\"input\"):\r\n      inputElement = <input className={inputClasses.join(\" \")}\r\n                            {...props.elementConfig}\r\n                            value={props.value} \r\n                            onChange={props.changed}/>;\r\n      break;\r\n\r\n    case (\"textarea\"):\r\n      inputElement = <textarea className={inputClasses.join(\" \")}\r\n                              {...props.elementConfig}\r\n                              value={props.value} \r\n                              onChange={props.changed} />;\r\n      break;\r\n    \r\n    case (\"select\"):\r\n    inputElement = (\r\n        <select \r\n            className={inputClasses.join(\" \")}\r\n            value={props.value} \r\n            onChange={props.changed}>\r\n            {props.elementConfig.options.map(option => {\r\n              return (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.displayValue}\r\n                </option>\r\n              )\r\n            })}\r\n        </select>\r\n        );\r\n      break;\r\n\r\n    default:\r\n      inputElement = <input className={inputClasses.join(\" \")}\r\n                            {...props.elementConfig}\r\n                            value={props.value} \r\n                            onChange={props.changed} />;\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3f2gU\",\"Label\":\"Input_Label__KbDJc\",\"InputElement\":\"Input_InputElement__2njDr\",\"Invalid\":\"Input_Invalid__27uTa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3oxkR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__juoH5\"};","import React from \"react\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nconst CheckoutSummary = (props) => {\r\n    const style = {\r\n      width : \"100%\", \r\n      margin: \"auto\",\r\n      display: \"flex\",\r\n    }\r\n\r\n    return (\r\n      <div className={classes.CheckoutSummary}>\r\n        <h1>Confirm your delicious burger!</h1>\r\n        <div style={style}>\r\n          <Burger ingredients={props.ingredients}/>\r\n        </div> \r\n        <Button\r\n            btnType=\"Success\"\r\n            clicked={props.checkoutContinued}\r\n            >CONTINUE</Button>\r\n        <Button\r\n            btnType=\"Danger\"\r\n            clicked={props.checkoutCancelled}>CANCEL</Button>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default CheckoutSummary;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\"\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport * as actions from \"../../../store/actions/\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm : {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n            type: \"text\",\r\n            placeholder: \"Your name\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Zipcode\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n          isNum: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Email\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            {value: \"standard\", displayValue: \"Standard\"},\r\n            {value: \"express\", displayValue: \"Express\"},\r\n            {value: \"prime\", displayValue: \"Prime\"},\r\n          ]\r\n        },\r\n        value: \"standard\",\r\n        validation: {},\r\n        valid: true \r\n      }\r\n    },\r\n    formIsValid: false\r\n  }\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n    //console.log(this.props.ings);\r\n    const formData = {}\r\n    // form element identifier is email, address, etc..\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n    }\r\n\r\n    const orderInfo = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId\r\n    }\r\n    this.props.onOrderBurger(orderInfo, this.props.token);\r\n  }\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    //console.log(event.target.value);\r\n    const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n      touched: true\r\n    }); \r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement\r\n    })\r\n  \r\n    let formIsValid = true;\r\n    // make a for in loop to go through all elements and check all inputs for validity\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\r\n    }\r\n    //console.log(formIsValid);\r\n    this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n\r\n  }\r\n\r\n  render() {\r\n    // turn order form object into array with for in loop.\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) { //key is name, address, etc...\r\n        formElementsArray.push({\r\n          id: key,\r\n          config: this.state.orderForm[key]\r\n        })\r\n    }\r\n\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>  {/* loop through form elements array with .map*/}\r\n          {formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.elementConfig.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n          ))}\r\n          <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n        </form>\r\n    );\r\n\r\n    if (this.props.isLoading) {\r\n      form = <Spinner />\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Please enter your contact info</h4>\r\n        {form}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    isLoading: state.burgerBuilder.isLoading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  }\r\n};\r\n\r\n// dispatch orders\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n  onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from \"react\";\r\nimport CheckoutSummary from \"../../components/Orders/CheckoutSummary/CheckoutSummary\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport { connect } from \"react-redux\";\r\nimport Auxiliary from \"../../hoc/Auxiliary/Auxiliary\";\r\n\r\n\r\nclass Checkout extends Component {\r\n  \r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  }\r\n\r\n  checkoutCancelledHandler = () => {\r\n    // react router has a a function for us to go back to the last page\r\n    this.props.history.goBack();\r\n  }\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />\r\n    \r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased && <Redirect to=\"/\" />\r\n      summary = (\r\n        <Auxiliary> {/* div? */}\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n\r\n          />\r\n          <Route\r\n            exact path={`${this.props.match.path}/contact-data`}\r\n            component={ContactData}\r\n          />\r\n        </Auxiliary>\r\n      );\r\n    }\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { //make sure this matches the initialState from reducer!\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased\r\n  };\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}