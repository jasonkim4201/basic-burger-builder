{"version":3,"sources":["components/Orders/Order.module.css","components/Orders/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","props","ingredients","ingredientName","push","name","amount","style","textTransform","display","margin","border","padding","fontWeight","ingredientOutput","map","ingredient","react_default","a","createElement","key","className","classes","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","isLoading","order","Orders_Order","id","error","CustomError","message","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,MAAA,gJC6CHA,EA1CD,SAACC,GAKb,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAkBF,EAAMC,YAE/BA,EAAYE,KAAK,CACfC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAM9B,IAAMI,EAAQ,CACZC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,MACTC,WAAY,QAGRC,EAAmBZ,EAAYa,IAAI,SAAAC,GAEvC,OAAOC,EAAAC,EAAAC,cAAA,QACLZ,MAAOA,EACPa,IAAKJ,EAAWX,MAAOW,EAAWX,KAF7B,KAEqCW,EAAWV,OAFhD,OAKT,OACEW,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQtB,OACtBiB,EAAAC,EAAAC,cAAA,yBAAiBL,GACjBG,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,kBAAUlB,EAAMsB,MAAMC,QAAQ,KAF1C,8CC5BEC,8LAGFC,KAAKzB,MAAM0B,cAAcD,KAAKzB,MAAM2B,MAAOF,KAAKzB,MAAM4B,yCAKtD,IAAIC,EAASb,EAAAC,EAAAC,cAACY,EAAA,EAAD,MAab,OAXKL,KAAKzB,MAAM+B,YACdF,EAASJ,KAAKzB,MAAM6B,OAAOf,IAAI,SAAAkB,GAE3B,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,CACGd,IAAKa,EAAME,GACXZ,OAAQU,EAAMV,MACdrB,YAAa+B,EAAM/B,iBAMjCe,EAAAC,EAAAC,cAAA,WACGO,KAAKzB,MAAMmC,MAAQnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAaC,QAAQ,gEAAkER,UAvB9FS,aA+CNC,sBAlBS,SAAAC,GACtB,MAAO,CACLX,OAAQW,EAAMR,MAAMH,OACpBE,UAAWS,EAAMR,MAAMD,UACvBI,MAAOK,EAAMR,MAAMG,MACnBR,MAAOa,EAAMC,KAAKd,MAClBC,OAAQY,EAAMC,KAAKb,SAII,SAAAc,GACzB,MAAO,CACLhB,cAAe,SAACC,EAAOC,GAAR,OAAmBc,EAASC,IAAoBhB,EAAOC,OAM3DW,CAA6CK,YAAiBpB,EAAQqB","file":"static/js/5.c7d47eeb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3r-ZW\"};","import React from \"react\";\r\nimport classes from \"./Order.module.css\"\r\n\r\n// use the props and insert in the order information \r\nconst Order = (props) => {\r\n  // can also used the transformed ingredients from burgers.js\r\n  // console.log(`props ingred`);\r\n  // console.log(props.ingredients);\r\n\r\n  const ingredients = [];\r\n  \r\n  for (let ingredientName in props.ingredients) {\r\n    //console.log(ingredientName);\r\n    ingredients.push({\r\n      name: ingredientName,\r\n      amount: props.ingredients[ingredientName] // <--- values of the ingredients\r\n    }); \r\n  }\r\n\r\n  // console.log('INGREDIENTS')\r\n  // console.log(ingredients);\r\n  const style = {\r\n    textTransform: \"capitalize\",\r\n    display: \"inline-block\",\r\n    margin: \"0 8px\",\r\n    border: \"1px solid #ccc\",\r\n    padding: \"5px\",\r\n    fontWeight: \"bold\"\r\n  }\r\n\r\n  const ingredientOutput = ingredients.map(ingredient => {\r\n    // console.log(ingredient);\r\n    return <span\r\n      style={style}\r\n      key={ingredient.name}>{ingredient.name} ({ingredient.amount})</span>\r\n  })\r\n\r\n  return (\r\n    <div className={classes.Order}>\r\n      <p>Ingredients: {ingredientOutput}</p>\r\n      <p>Price: <strong>${props.price.toFixed(2)}</strong></p> {/* adding toFixed(2) just in case */}\r\n      {/* can also use Number.parseFloat(props.price.toFixed(2)) */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Order;","import React, {Component} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Order from \"../../components/Orders/Order\";\r\nimport axios from \"../../axios-orders\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../store/actions/\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport CustomError from \"../../components/CustomError/CustomError\";\r\n\r\n\r\nclass Orders extends Component {\r\n  // get token from redux auth reducer file. aka pull it from mapStateToProps\r\n  componentDidMount() {\r\n    this.props.onFetchOrders(this.props.token, this.props.userId);\r\n  }\r\n\r\n  render() {\r\n    // if error state is true dislpay custom error page else have the orders rendered\r\n    let orders = <Spinner />;\r\n   \r\n    if (!this.props.isLoading) {   \r\n      orders = this.props.orders.map(order => {\r\n          //console.log(order);  \r\n          return <Order \r\n                    key={order.id}\r\n                    price={+order.price} //adding '+' before order.price to make toFixed() work\r\n                    ingredients={order.ingredients}\r\n                  />\r\n        })  \r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        {this.props.error ? <CustomError message=\"Looks like we're experiencing some issues. Come back later!\"/> : orders}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    orders: state.order.orders, \r\n    isLoading: state.order.isLoading, \r\n    error: state.order.error,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  } //redux dev tools is so useful here\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId)),\r\n  };\r\n}\r\n\r\n// remember to connect mapStateToProps... thats why its screaming at me that its not a function AND IMPORT CONNECT!\r\n// wrap export default with an error handler! also reminder to pass in axios as an arguement!\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));\r\n// hey remember its connect(matchStateToProps, matchDispatchToProps)...."],"sourceRoot":""}