{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Authenticate/Auth.module.css","containers/Authenticate/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","C_Users_Jason_Desktop_udemy_udemy_react_basic_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","handleFormSubmit","preventDefault","onAuth","switchAuthModeHandler","prevState","this","isBuilding","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","isLoading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","formEnterBtn","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","style","fontWeight","color","onSubmit","clicked","Component","connect","auth","loading","token","burgerBuilder","dispatch","actions"],"mappings":"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","file":"static/js/4.88a259cd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst Input = (props) => {\r\n  // make className more dymanic depending on whether form input is valid or not\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    // if invalid property turns out to be true push the invalid css custom class\r\n    // add should validate props to prevent dropdown from being red\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n      inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n  switch (props.elementType) {\r\n\r\n    case (\"input\"):\r\n      inputElement = <input className={inputClasses.join(\" \")}\r\n                            {...props.elementConfig}\r\n                            value={props.value} \r\n                            onChange={props.changed}/>;\r\n      break;\r\n\r\n    case (\"textarea\"):\r\n      inputElement = <textarea className={inputClasses.join(\" \")}\r\n                              {...props.elementConfig}\r\n                              value={props.value} \r\n                              onChange={props.changed} />;\r\n      break;\r\n    \r\n    case (\"select\"):\r\n    inputElement = (\r\n        <select \r\n            className={inputClasses.join(\" \")}\r\n            value={props.value} \r\n            onChange={props.changed}>\r\n            {props.elementConfig.options.map(option => {\r\n              return (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.displayValue}\r\n                </option>\r\n              )\r\n            })}\r\n        </select>\r\n        );\r\n      break;\r\n\r\n    default:\r\n      inputElement = <input className={inputClasses.join(\" \")}\r\n                            {...props.elementConfig}\r\n                            value={props.value} \r\n                            onChange={props.changed} />;\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3f2gU\",\"Label\":\"Input_Label__KbDJc\",\"InputElement\":\"Input_InputElement__2njDr\",\"Invalid\":\"Input_Invalid__27uTa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1nGzo\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n  // manage state through here instead of redux\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Email\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n    },\r\n    isSignUp: true\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.props.isBuilding && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n        touched: true\r\n      })\r\n    });\r\n    this.setState({ controls: updatedControls });\r\n  }\r\n\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    // onAuth needs the email and password\r\n\r\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n  }\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState(prevState => {\r\n      return { isSignUp: !prevState.isSignUp };\r\n    })\r\n  }\r\n\r\n  render() {\r\n    // similar process to contact data container\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) { //key is name, address, etc...\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key]\r\n      })\r\n    }\r\n    let form = formElementsArray.map(formElement => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.elementConfig.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n    ));\r\n\r\n    if (this.props.isLoading) {\r\n      form = <Spinner />\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n       // console.log(this.props.error.message)\r\n      switch (this.props.error.message) {\r\n        case \"INVALID_EMAIL\": errorMessage = <p>Please use a valid email.</p>\r\n          break;\r\n        case \"EMAIL_EXISTS\": errorMessage = <p>Email already exists.</p>\r\n          break;\r\n        case \"EMAIL_NOT_FOUND\": errorMessage = <p>Email does not exist. Please try another email or register an account.</p>\r\n          break;\r\n        case \"MISSING_PASSWORD\": errorMessage = <p>Please include a password.</p>\r\n          break;\r\n        case \"WEAK_PASSWORD : Password should be at least 6 characters\": errorMessage = <p>Password should be at least 6 characters.</p>\r\n          break;\r\n        case \"INVALID_PASSWORD\": errorMessage = <p>Incorrect password. Please try again.</p>\r\n          break;        \r\n        case \"USER_DISABLED\": errorMessage = <p>Your account has been suspensed. Please contact the administrator</p>\r\n          break;\r\n        default: errorMessage = <p>{this.props.error.message}</p>\r\n          break;\r\n      }\r\n\r\n    }\r\n\r\n    const style = {\r\n      fontWeight: \"bold\",\r\n      color: \"red\"\r\n    }\r\n\r\n    const formEnterBtn = this.state.isSignUp \r\n                        ? <Button btnType=\"Success\">REGISTER</Button>\r\n                        : <Button btnType=\"Success\">CONTINUE</Button>;\r\n    // after clicking on continue have it redirect to main page. need to bring in props for authentication too\r\n    let authRedirect = null; \r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n    \r\n    return (\r\n      <div className={classes.Auth}>\r\n        <h2>{this.state.isSignUp ? \"Register account\" : \"Sign in\"}</h2>\r\n        {authRedirect}\r\n        <div style={style}>{errorMessage}</div>\r\n        <form onSubmit={this.handleFormSubmit}>\r\n          {form}\r\n          {formEnterBtn}\r\n        </form>\r\n        <Button\r\n          clicked={this.switchAuthModeHandler}\r\n          btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? \"SIGN IN\" : \"REGISTER\"}</Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isLoading: state.auth.loading, //becase rootReducer which leads to auth in reducers folder\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    isBuilding: state.burgerBuilder.isBuilding,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}